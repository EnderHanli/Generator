<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="DtoNamespace" #>
<#@ parameter type="System.String" name="DtoClassName" #>
<#@ parameter type="System.String" name="DtoParameterName" #>
<#@ parameter type="System.String" name="DalNamespace" #>
<#@ parameter type="System.String" name="DalClassName" #>
<#@ parameter type="System.String" name="DalParameterName" #>
<#@ parameter type="System.String" name="SchemaName" #>
<#@ parameter type="System.String" name="ClassName" #>
<#@ parameter type="System.Collections.Generic.List<Model.DbColumn>" name="DbColumns" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using Appendesk;
using <#=DtoNamespace #>;

namespace <#=Namespace #>
{
    public partial class <#=ClassName #> : BusinessLayer
    {
        public List<<#=DtoClassName #>> GetEntities(List<QueryParameter> queryParameters)
        {
            try
            {
                return GetByParameter(queryParameters);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<<#=DtoClassName #>> Insert(List<<#=DtoClassName #>> <#=DtoParameterName #>)
        {
            try
            {
                <#=DalParameterName #>.TransactionBegin();
                for (int i = 0; i < <#=DtoParameterName #>.Count; i++)
                {
<# if(DbColumns.Where(p => p.ColumnName == "Id").Count() > 0)
{#>
                    <#=DtoParameterName #>[i].Id = <#=DalParameterName #>.GetSequence("Id");
<#}#>
                    <#=DtoParameterName #>[i] = Insert(<#=DtoParameterName #>[i]);
                    if (<#=DtoParameterName #>[i].Response.ResponseLevel == ResponseLevel.Warning)
                    {
                        <#=DalParameterName #>.TransactionRollback();
                        return <#=DtoParameterName #>;
                    }
                }

                <#=DalParameterName #>.TransactionCommit();
                return <#=DtoParameterName #>;
            }
            catch (Exception)
            {
                <#=DalParameterName #>.TransactionRollback();
                throw;
            }
        }

        public List<<#=DtoClassName #>> Update(List<<#=DtoClassName #>> <#=DtoParameterName #>)
        {
            try
            {
                <#=DalParameterName #>.TransactionBegin();
                for (int i = 0; i < <#=DtoParameterName #>.Count; i++)
                {
                    <#=DtoParameterName #>[i] = Update(<#=DtoParameterName #>[i]);
                    if (<#=DtoParameterName #>[i].Response.ResponseLevel == ResponseLevel.Warning)
                    {
                        <#=DalParameterName #>.TransactionRollback();
                        return <#=DtoParameterName #>;
                    }
                }

                <#=DalParameterName #>.TransactionCommit();
                return <#=DtoParameterName #>;
            }
            catch (Exception)
            {
                <#=DalParameterName #>.TransactionRollback();
                throw;
            }
        }

        public List<<#=DtoClassName #>> Delete(List<<#=DtoClassName #>> <#=DtoParameterName #>)
        {
            try
            {
                <#=DalParameterName #>.TransactionBegin();
                for (int i = 0; i < <#=DtoParameterName #>.Count; i++)
                {
                    <#=DtoParameterName #>[i] = Delete(<#=DtoParameterName #>[i]);
                    if (<#=DtoParameterName #>[i].Response.ResponseLevel == ResponseLevel.Warning)
                    {
                        <#=DalParameterName #>.TransactionRollback();
                        return <#=DtoParameterName #>;
                    }
                }

                <#=DalParameterName #>.TransactionCommit();
                return <#=DtoParameterName #>;
            }
            catch (Exception)
            {
                <#=DalParameterName #>.TransactionRollback();
                throw;
            }
        }
    }
}