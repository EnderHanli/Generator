// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ClassGenerator.Extension.Template
{
    using System.Linq;
    using System.Data;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class RepositoryTemplate : RepositoryTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing Appen" +
                    "desk;\r\nusing ");
            
            #line 23 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 25 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic sealed partial class ");
            
            #line 27 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : DataLayer\r\n\t{\r\n\t\tpublic ");
            
            #line 29 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic ");
            
            #line 33 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(string connectionName) : base(connectionName)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic ");
            
            #line 37 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(DataLayer dataLayer) : base(dataLayer)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic List<");
            
            #line 41 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoClassName));
            
            #line default
            #line hidden
            this.Write("> GetByParameter (List<QueryParameter> queryParameters)\r\n\t\t{\r\n\t\t\tvar whereClause " +
                    "= string.Empty;\r\n\r\n            if (queryParameters.Count > 0)\r\n                w" +
                    "hereClause = GetWhereClause(queryParameters);\r\n\r\n            string sql = \"");
            
            #line 48 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetSql));
            
            #line default
            #line hidden
            this.Write("\" + whereClause;\r\n            var command = GetQueryCommand(sql);\r\n            co" +
                    "mmand.AddParameters(queryParameters);\r\n            return GetEntites<");
            
            #line 51 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoClassName));
            
            #line default
            #line hidden
            this.Write(">(command);\r\n\t\t}\r\n\r\n\t\tpublic void Insert (");
            
            #line 54 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 54 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tconst string sql = \"");
            
            #line 56 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(InsertSql));
            
            #line default
            #line hidden
            this.Write("\";\r\n            var command = GetQueryCommand(sql);\r\n\r\n");
            
            #line 59 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
 
foreach (var parameter in DbColumns) 
{
if(parameter.DbType == DbType.DateTime)
{
if(parameter.IsNullable == true)
{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 66 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 66 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(".HasValue == true)\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 68 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 68 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 68 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 68 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 72 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DBNull.Value, DbType.");
            
            #line 72 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n");
            
            #line 74 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
else
{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 77 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 77 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(" != DateTime.MinValue)\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 79 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 79 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 79 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 79 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 83 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DateTime.Now, DbType.");
            
            #line 83 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n");
            
            #line 85 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
}
else
{
            
            #line default
            #line hidden
            this.Write("\t\t\tcommand.AddParameter(\"");
            
            #line 89 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 89 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 89 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 89 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 90 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
}

            
            #line default
            #line hidden
            this.Write("\r\n            Insert(command);\r\n\t\t}\r\n\r\n\t\tpublic void Update (");
            
            #line 97 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 97 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tconst string sql = \"");
            
            #line 99 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UpdateSql));
            
            #line default
            #line hidden
            this.Write("\";\r\n            var command = GetQueryCommand(sql);\r\n\r\n");
            
            #line 102 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
 
foreach (var parameter in DbColumns) 
{
if(parameter.DbType == DbType.DateTime)
{
if(parameter.IsNullable == true)
{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 109 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 109 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(".HasValue == true)\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 111 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 111 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 111 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 111 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 115 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DBNull.Value, DbType.");
            
            #line 115 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n");
            
            #line 117 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
else
{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 120 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 120 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(" != DateTime.MinValue)\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 122 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 122 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 122 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 122 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcommand.AddParameter(\"");
            
            #line 126 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DateTime.Now, DbType.");
            
            #line 126 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n");
            
            #line 128 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
}
else
{
            
            #line default
            #line hidden
            this.Write("\t\t\tcommand.AddParameter(\"");
            
            #line 132 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 132 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 132 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 132 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 133 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}
}

            
            #line default
            #line hidden
            this.Write("\r\n            Update(command);\r\n\t\t}\r\n\r\n\t\tpublic void Delete (");
            
            #line 140 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 140 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tconst string sql = \"");
            
            #line 142 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DeleteSql));
            
            #line default
            #line hidden
            this.Write("\";\r\n            var command = GetQueryCommand(sql);\r\n\r\n");
            
            #line 145 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
 
foreach (var parameter in DbColumns) 
{
if(parameter.IsPrimaryKey == true)
{
            
            #line default
            #line hidden
            this.Write("\t\t\tcommand.AddParameter(\"");
            
            #line 150 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 150 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DtoParameterName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 150 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ColumnName));
            
            #line default
            #line hidden
            this.Write(", DbType.");
            
            #line 150 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 151 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"
}

}

            
            #line default
            #line hidden
            this.Write("\r\n            Delete(command);\r\n\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "W:\Generator\ClassGenerator.Extension\Template\RepositoryTemplate.tt"

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}

private string _DtoNamespaceField;

/// <summary>
/// Access the DtoNamespace parameter of the template.
/// </summary>
private string DtoNamespace
{
    get
    {
        return this._DtoNamespaceField;
    }
}

private string _DtoClassNameField;

/// <summary>
/// Access the DtoClassName parameter of the template.
/// </summary>
private string DtoClassName
{
    get
    {
        return this._DtoClassNameField;
    }
}

private string _DtoParameterNameField;

/// <summary>
/// Access the DtoParameterName parameter of the template.
/// </summary>
private string DtoParameterName
{
    get
    {
        return this._DtoParameterNameField;
    }
}

private string _SchemaNameField;

/// <summary>
/// Access the SchemaName parameter of the template.
/// </summary>
private string SchemaName
{
    get
    {
        return this._SchemaNameField;
    }
}

private string _ClassNameField;

/// <summary>
/// Access the ClassName parameter of the template.
/// </summary>
private string ClassName
{
    get
    {
        return this._ClassNameField;
    }
}

private string _GetSqlField;

/// <summary>
/// Access the GetSql parameter of the template.
/// </summary>
private string GetSql
{
    get
    {
        return this._GetSqlField;
    }
}

private string _InsertSqlField;

/// <summary>
/// Access the InsertSql parameter of the template.
/// </summary>
private string InsertSql
{
    get
    {
        return this._InsertSqlField;
    }
}

private string _UpdateSqlField;

/// <summary>
/// Access the UpdateSql parameter of the template.
/// </summary>
private string UpdateSql
{
    get
    {
        return this._UpdateSqlField;
    }
}

private string _DeleteSqlField;

/// <summary>
/// Access the DeleteSql parameter of the template.
/// </summary>
private string DeleteSql
{
    get
    {
        return this._DeleteSqlField;
    }
}

private global::System.Collections.Generic.List<Model.DbColumn> _DbColumnsField;

/// <summary>
/// Access the DbColumns parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<Model.DbColumn> DbColumns
{
    get
    {
        return this._DbColumnsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    this._NamespaceField = ((string)(this.Session["Namespace"]));
    NamespaceValueAcquired = true;
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        this._NamespaceField = ((string)(data));
    }
}
bool DtoNamespaceValueAcquired = false;
if (this.Session.ContainsKey("DtoNamespace"))
{
    this._DtoNamespaceField = ((string)(this.Session["DtoNamespace"]));
    DtoNamespaceValueAcquired = true;
}
if ((DtoNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DtoNamespace");
    if ((data != null))
    {
        this._DtoNamespaceField = ((string)(data));
    }
}
bool DtoClassNameValueAcquired = false;
if (this.Session.ContainsKey("DtoClassName"))
{
    this._DtoClassNameField = ((string)(this.Session["DtoClassName"]));
    DtoClassNameValueAcquired = true;
}
if ((DtoClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DtoClassName");
    if ((data != null))
    {
        this._DtoClassNameField = ((string)(data));
    }
}
bool DtoParameterNameValueAcquired = false;
if (this.Session.ContainsKey("DtoParameterName"))
{
    this._DtoParameterNameField = ((string)(this.Session["DtoParameterName"]));
    DtoParameterNameValueAcquired = true;
}
if ((DtoParameterNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DtoParameterName");
    if ((data != null))
    {
        this._DtoParameterNameField = ((string)(data));
    }
}
bool SchemaNameValueAcquired = false;
if (this.Session.ContainsKey("SchemaName"))
{
    this._SchemaNameField = ((string)(this.Session["SchemaName"]));
    SchemaNameValueAcquired = true;
}
if ((SchemaNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SchemaName");
    if ((data != null))
    {
        this._SchemaNameField = ((string)(data));
    }
}
bool ClassNameValueAcquired = false;
if (this.Session.ContainsKey("ClassName"))
{
    this._ClassNameField = ((string)(this.Session["ClassName"]));
    ClassNameValueAcquired = true;
}
if ((ClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ClassName");
    if ((data != null))
    {
        this._ClassNameField = ((string)(data));
    }
}
bool GetSqlValueAcquired = false;
if (this.Session.ContainsKey("GetSql"))
{
    this._GetSqlField = ((string)(this.Session["GetSql"]));
    GetSqlValueAcquired = true;
}
if ((GetSqlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("GetSql");
    if ((data != null))
    {
        this._GetSqlField = ((string)(data));
    }
}
bool InsertSqlValueAcquired = false;
if (this.Session.ContainsKey("InsertSql"))
{
    this._InsertSqlField = ((string)(this.Session["InsertSql"]));
    InsertSqlValueAcquired = true;
}
if ((InsertSqlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("InsertSql");
    if ((data != null))
    {
        this._InsertSqlField = ((string)(data));
    }
}
bool UpdateSqlValueAcquired = false;
if (this.Session.ContainsKey("UpdateSql"))
{
    this._UpdateSqlField = ((string)(this.Session["UpdateSql"]));
    UpdateSqlValueAcquired = true;
}
if ((UpdateSqlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UpdateSql");
    if ((data != null))
    {
        this._UpdateSqlField = ((string)(data));
    }
}
bool DeleteSqlValueAcquired = false;
if (this.Session.ContainsKey("DeleteSql"))
{
    this._DeleteSqlField = ((string)(this.Session["DeleteSql"]));
    DeleteSqlValueAcquired = true;
}
if ((DeleteSqlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DeleteSql");
    if ((data != null))
    {
        this._DeleteSqlField = ((string)(data));
    }
}
bool DbColumnsValueAcquired = false;
if (this.Session.ContainsKey("DbColumns"))
{
    this._DbColumnsField = ((global::System.Collections.Generic.List<Model.DbColumn>)(this.Session["DbColumns"]));
    DbColumnsValueAcquired = true;
}
if ((DbColumnsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DbColumns");
    if ((data != null))
    {
        this._DbColumnsField = ((global::System.Collections.Generic.List<Model.DbColumn>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class RepositoryTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
